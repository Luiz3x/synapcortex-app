// =================================================================================
// SYNAPCORTEX MASTER SCRIPT - Versão Final
// Contém toda a lógica: Site Principal, Dashboard e Espião do Cliente.
// =================================================================================

document.addEventListener('DOMContentLoaded', function() {

    // -----------------------------------------------------------------------------
    // SEÇÃO 1: LÓGICA DO SITE PRINCIPAL (Página de Vendas / index.html)
    // -----------------------------------------------------------------------------

    // Lógica do Gráfico de Demonstração
    const ctx = document.getElementById('graficoDemonstracao');
    if (ctx) {
        const labels = ['-50s', '-40s', '-30s', '-20s', '-10s', 'Agora'];
        const data = {
            labels: labels,
            datasets: [{
                label: 'Clientes Recuperados',
                backgroundColor: 'rgba(0, 204, 255, 0.2)',
                borderColor: 'rgba(0, 204, 255, 1)',
                data: [65, 59, 80, 81, 56, 55],
                fill: true,
                tension: 0.4
            }]
        };
        const config = {
            type: 'line',
            data: data,
            options: {
                responsive: true,
                plugins: { legend: { display: false } },
                scales: {
                    y: { beginAtZero: true, ticks: { color: '#bbbbbb' }, grid: { color: 'rgba(255, 255, 255, 0.1)' } },
                    x: { ticks: { color: '#bbbbbb' }, grid: { display: false } }
                }
            }
        };
        const meuGrafico = new Chart(ctx, config);
        setInterval(() => {
            const novoDado = Math.floor(Math.random() * 55) + 40;
            meuGrafico.data.datasets[0].data.shift();
            meuGrafico.data.datasets[0].data.push(novoDado);
            meuGrafico.update();
        }, 2000);
    }

    // Lógica do Modal de Login/Registro
    const modal = document.getElementById('loginRegisterModal');
    const openModalBtn = document.getElementById('openLoginRegisterModal');
    const closeButton = document.querySelector('.modal .close-button');
    const tabButtons = document.querySelectorAll('.tab-button');
    const tabContents = document.querySelectorAll('.tab-content');

    if (openModalBtn) { openModalBtn.onclick = () => { modal.style.display = 'flex'; }; }
    if (closeButton) { closeButton.onclick = () => { modal.style.display = 'none'; }; }
    window.onclick = event => { if (event.target == modal) modal.style.display = 'none'; };

    tabButtons.forEach(button => {
        button.addEventListener('click', function() {
            tabButtons.forEach(btn => btn.classList.remove('active'));
            tabContents.forEach(content => content.classList.remove('active'));
            this.classList.add('active');
            document.getElementById(this.dataset.tab + 'Tab').classList.add('active');
        });
    });

    // Lógica do Formulário de Login
    const loginForm = document.getElementById('loginForm');
    if (loginForm) {
        loginForm.addEventListener('submit', function(e) {
            e.preventDefault();
            const formData = new FormData(loginForm);
            const loginErrorMessage = document.getElementById('loginErrorMessage');
            loginErrorMessage.style.display = 'none';

            fetch("/login", { method: 'POST', body: new URLSearchParams(formData) })
                .then(response => response.json().then(data => ({ ok: response.ok, data })))
                .then(({ ok, data }) => {
                    if (ok) {
                        window.location.href = data.redirect_url;
                    } else {
                        loginErrorMessage.textContent = data.message || 'Erro no login.';
                        loginErrorMessage.style.display = 'block';
                    }
                })
                .catch(error => {
                    loginErrorMessage.textContent = 'Erro de comunicação.';
                    loginErrorMessage.style.display = 'block';
                });
        });
    }

    // Lógica do Formulário de Registro
    const registerForm = document.getElementById('registerForm');
    if (registerForm) {
        registerForm.addEventListener('submit', function(e) {
            e.preventDefault();
            const formData = new FormData(registerForm);
            const registerErrorMessage = document.getElementById('registerErrorMessage');
            registerErrorMessage.style.display = 'none';

            fetch("/registrar", { method: 'POST', body: new URLSearchParams(formData) })
                .then(response => response.json().then(data => ({ ok: response.ok, data })))
                .then(({ ok, data }) => {
                    if (ok) {
                        window.location.href = data.redirect_url;
                    } else {
                        registerErrorMessage.textContent = data.message || 'Erro no registro.';
                        registerErrorMessage.style.display = 'block';
                    }
                })
                .catch(error => {
                    registerErrorMessage.textContent = 'Erro de comunicação.';
                    registerErrorMessage.style.display = 'block';
                });
        });
    }

    // Lógica do Botão "Test Drive" (Login de Demonstração)
    const demoLoginBtn = document.getElementById('demoLoginBtn');
    if (demoLoginBtn) {
        demoLoginBtn.addEventListener('click', function() {
            const emailField = document.getElementById('modal-email-login');
            const passwordField = document.getElementById('modal-password-login');
            
            if (emailField && passwordField && loginForm) {
                // Abre o modal se estiver fechado
                if (modal.style.display !== 'flex') {
                    modal.style.display = 'flex';
                }
                // Preenche com os dados de demonstração
                emailField.value = 'demo@synapcortex.com';
                passwordField.value = 'demo'; // A senha backend deve aceitar 'demo' para esta conta
                
                // Dispara o envio do formulário de login
                loginForm.dispatchEvent(new Event('submit', { bubbles: true, cancelable: true }));
            }
        });
    }

    // -----------------------------------------------------------------------------
    // SEÇÃO 2: LÓGICA DO PAINEL DO CLIENTE (dashboard.html)
    // -----------------------------------------------------------------------------

    const configForm = document.getElementById('config-form');
    if (configForm) {
        configForm.addEventListener('submit', (event) => {
            event.preventDefault();
            const formData = new FormData(configForm);
            
            fetch('/salvar-configuracoes', {
                method: 'POST',
                body: new URLSearchParams(formData)
            })
            .then(response => {
                if (response.ok) {
                    // Adiciona um feedback visual de sucesso antes de recarregar
                    const saveButton = configForm.querySelector('button[type="submit"]');
                    const originalText = saveButton.textContent;
                    saveButton.textContent = 'Salvo com Sucesso!';
                    saveButton.style.backgroundColor = '#28a745'; // Verde sucesso
                    
                    setTimeout(() => {
                        window.location.reload();
                    }, 1500); // Espera 1.5s antes de recarregar
                } else {
                    alert('Ocorreu um erro ao salvar as configurações.');
                }
            })
            .catch(error => {
                console.error('Erro ao salvar:', error);
                alert('Erro de comunicação ao salvar.');
            });
        });
    }


    // -----------------------------------------------------------------------------
    // SEÇÃO 3: LÓGICA DO ESPIÃO (Executado no Site do Cliente)
    // -----------------------------------------------------------------------------

    // Função para pegar a API Key da tag do script
    function getApiKey() {
        const scriptTag = document.getElementById('synapcortex-spy-script');
        if (!scriptTag) {
            console.error("SynapCortex: O ID 'synapcortex-spy-script' não foi encontrado na tag do script.");
            return null;
        }
        // O URL do backend está no data-attribute para mais flexibilidade
        const backendUrl = scriptTag.dataset.backendUrl; 
        const scriptUrl = new URL(scriptTag.src);
        const apiKey = scriptUrl.searchParams.get('key');
        
        if (!backendUrl || !apiKey) {
            console.error("SynapCortex: 'data-backend-url' ou 'key' não encontrados na tag do script.");
            return null;
        }
        return { key: apiKey, url: backendUrl };
    }

    // Função para verificar se é um dispositivo móvel
    function isMobileDevice() {
        return (typeof window.orientation !== "undefined") || (navigator.userAgent.indexOf('IEMobile') !== -1);
    }

    let popupMostradoNestaSessao = false;

    // Função para mostrar o pop-up
    function mostrarPopup(motivo, titulo, mensagem) {
        if (popupMostradoNestaSessao) return;
        popupMostradoNestaSessao = true;
        console.log(`SynapCortex: Pop-up acionado! Motivo: ${motivo}`);
        
        // Cria o HTML do pop-up dinamicamente e injeta no body
        const popupDiv = document.createElement('div');
        popupDiv.innerHTML = `
            <div id="popup-espiao-synapcortex" style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.7); display: flex; justify-content: center; align-items: center; z-index: 9999;">
                <div class="popup-conteudo-synapcortex" style="background-color: #fff; padding: 20px 40px; border-radius: 8px; text-align: center; max-width: 400px; position: relative;">
                    <button class="fechar-btn-synapcortex" style="position: absolute; top: 10px; right: 15px; background: none; border: none; font-size: 24px; cursor: pointer;">&times;</button>
                    <h2 id="popup-titulo-display-synapcortex">${titulo}</h2>
                    <p id="popup-mensagem-display-synapcortex">${mensagem}</p>
                </div>
            </div>
        `;
        document.body.appendChild(popupDiv);

        // Adiciona evento para o botão de fechar
        popupDiv.querySelector('.fechar-btn-synapcortex').addEventListener('click', () => {
            document.body.removeChild(popupDiv);
        });
    }

    // O motor que ativa os gatilhos com base na configuração recebida
    function inicializarMotorDeGatilhos(config) {
        console.log("SynapCortex: Ordens recebidas. Inicializando gatilhos...");

        const tituloPadrao = config.popup_titulo || "Temos uma oferta!";
        const mensagemPadrao = config.popup_mensagem || "Não perca esta chance.";

        // Gatilho de Abandono (Desktop e Mobile)
        if (isMobileDevice()) {
            document.addEventListener('visibilitychange', () => {
                if (document.visibilityState === 'hidden') mostrarPopup("Abandono Mobile", tituloPadrao, mensagemPadrao);
            });
        } else {
            document.addEventListener('mouseleave', event => {
                if (event.clientY <= 0) mostrarPopup("Abandono Desktop", tituloPadrao, mensagemPadrao);
            });
        }

        // Gatilho de Visitante Recorrente
        if (config.ativar_quarto_bem_vindo) {
            const cookieVisita = 'synapcortex_visitou';
            if (document.cookie.includes(cookieVisita)) {
                mostrarPopup("Visitante Recorrente", config.popup_titulo, config.msg_bem_vindo);
            }
            document.cookie = `${cookieVisita}=true; max-age=31536000; path=/`; // Seta/reseta o cookie
        }
        
        // Gatilho de Inatividade
        if (config.ativar_quarto_interessado) {
            let tempoInativo;
            const reiniciarContador = () => {
                clearTimeout(tempoInativo);
                tempoInativo = setTimeout(() => {
                    mostrarPopup(`Inatividade`, config.popup_titulo, config.msg_interessado);
                }, 30000); // 30 segundos
            };
            ['load', 'mousemove', 'keydown', 'touchstart', 'click'].forEach(evento => window.addEventListener(evento, reiniciarContador, false));
        }
    }


    // -----------------------------------------------------------------------------
    // SEÇÃO 4: BLOCO DE EXECUÇÃO PRINCIPAL
    // -----------------------------------------------------------------------------

    const apiInfo = getApiKey();
    if (apiInfo && apiInfo.key) {
        // Se encontrou uma API Key, estamos no site de um cliente.
        // Buscar as configurações do cliente.
        fetch(`${apiInfo.url}/api/get-client-config?key=${apiInfo.key}`)
            .then(response => {
                if (!response.ok) throw new Error('Chave de API inválida ou erro no servidor.');
                return response.json();
            })
            .then(config => {
                inicializarMotorDeGatilhos(config);
            })
            .catch(error => {
                console.error("SynapCortex: Falha ao obter configurações.", error);
            });
    }
    // Se não encontrou a API Key, o script está no site da SynapCortex,
    // e as lógicas das seções 1 e 2 já foram inicializadas acima.

});